package org.usfirst.frc.team1378.robot; // bulldogs!

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.can.*;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class Robot extends IterativeRobot {
	
	TalonSRX _tal = new TalonSRX(2); // Master
	TalonSRX _tal2 = new TalonSRX(1); //Slave
	TalonSRX _tal3 = new TalonSRX(3); //Slave
	PlotThread _plotThread;
	Joystick _joystick = new Joystick(0);
	
	public void teleopInit() {
		/* Tal1 will follow Tal3 */
		_tal2.follow(_tal);
		_tal3.follow(_tal);
		
		/* new frame every 1ms, since this is a test project use up as 
		 * much bandwidth as possible for the purpose of this test. */
		_tal.setStatusFramePeriod(StatusFrameEnhanced.Status_2_Feedback0, 1, 10);
		_tal.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, 0, 10);

		// variables storing different values for the TalonSRX mag encoder
		int count = _tal.getSelectedSensorVelocity(); 
		int getRaw = _tal.getRaw();
		int distance = _tal.getSelectedSensorPosition();

		/* fire the plotter */
		_plotThread = new PlotThread(this);
		new Thread(_plotThread).start();
	}
	public void teleopPeriodic() {
		/* Shooting for ~200RPM, which is ~300ms per rotation.
		 *   
		 * If there is mechanical defection, eccentricity, or damage in the sensor
		 * it should be revealed in the plot.  
		 * 
		 * For example, an optical encoder with a partially damaged ring will reveal a 
		 * periodic dip in the sensed velocity synchronous with each rotation.
		 * 
		 *  This can also be wired to a gamepad to test velocity sweeping.
		 * */
		if(_joystick.getRawButton(1))
		{
			_tal.set(ControlMode.PercentOutput, 0.25);
		}
		else {
			_tal.set(ControlMode.PercentOutput, 0.0);
		}
	}
	/** quick and dirty threaded plotter */
	class PlotThread implements Runnable {
		 Robot robot;
		 public PlotThread(Robot robot) { this.robot = robot; }

		 public void run() {
			/* speed up network tables, this is a test project so eat up all 
			 * of the network possible for the purpose of this test.
			 */
			NetworkTable.setUpdateRate(0.010); /* this suggests each time unit is 10ms in the plot */
			while (true) {
				/* yield for a ms or so - this is not meant to be accurate */
				try { Thread.sleep(1); } catch (Exception e) { }
				/* grab the last signal update from our 1ms frame update */
				double position = this.robot._tal.getSelectedSensorPosition(0);
				double velocity = this.robot._tal.getSelectedSensorVelocity(0);
				if (_joystick.getRawButton(3)) {
					_tal.setSelectedSensorPosition(0, 0, 0);
				}
				if(_joystick.getRawButton(2)) {
					while(position < 60000)
					{
						position = this.robot._tal.getSelectedSensorPosition(0);
						_tal.set(ControlMode.PercentOutput, 0.50);
						SmartDashboard.putNumber("Position",position);
					}
				}
				if(_joystick.getRawButton(4)) {
					while(position < 30000)
					{
						position = this.robot._tal.getSelectedSensorPosition(0);
						_tal.set(ControlMode.PercentOutput, 0.25);
						SmartDashboard.putNumber("Position",position);
					}
				}
				if(_joystick.getRawButton(5)) {
					while(position < 100000)
					{
						position = this.robot._tal.getSelectedSensorPosition(0);
						_tal.set(ControlMode.PercentOutput, 1.0);
						SmartDashboard.putNumber("Position",position);
					}
				}
				SmartDashboard.putNumber("Vel",velocity);
				SmartDashboard.putNumber("Position",position);
			}
		}
	} new Thread(_plotThread.stop()); // stops _plotThread from running
}
